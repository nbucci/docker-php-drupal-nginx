upstream php {
    server ${PHP_HOST}:${PHP_PORT};
}

map $http_x_forwarded_proto $fastcgi_https {
    default $https;
    http '';
    https on;
}

# We should use $request_uri to support redirect with query parameters.
map $request_uri $new_uri {
  include /etc/nginx/conf.d/redirects[.]map;
}

# Custom configuration to be included dynamically.
include /etc/nginx/conf.d/custom/*.conf;

server {
    server_name ${NGINX_DEFAULT_SERVER_NAME};
    # Please note that nginx always has a default server. 
    # In the absence of any server block explicitly marked 
    # as default_server , nginx will use the first server 
    # with a matching listen directive.
    # If defaul_server is set, this server will be the
    # default, catch all server, regardless of server_name.
    listen ${NGINX_DEFAULT_SERVER_PORT} ${DEFAULT_SERVER};

    if ($new_uri) {
        return 301 $new_uri;
    }

    root ${NGINX_DEFAULT_ROOT};
    index index.php;

    include fastcgi.conf;
    #httpsredirect

    include /etc/nginx/conf.d/fragments/*.conf;

    # Just return for google gclb healthcheck.
    if ($http_user_agent = 'GoogleHC/1.0') {
      return 200;
    }

    location = /favicon.ico {
        expires 30d;
        # Google cloud cdn needs a Cache-Control: public header.
        add_header Cache-Control "public";
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location ~* \.(txt|log)$ {
        allow 192.168.0.0/16;
        deny all;
    }

    location ~ \..*/.*\.php$ {
        return 403;
    }

    location ~ ^/sites/.*/private/ {
        return 403;
    }

    location ~ ^/sites/[^/]+/files/.*\.php$ {
        deny all;
    }

    location ~* ^/.well-known/ {
        allow all;
    }

    location ~ (^|/)\. {
        return 403;
    }

    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    location / {
        try_files $uri @rewrite;
    }

    location @rewrite {
        rewrite ^ /index.php;
    }

    location ~ \.php$ {
        include fastcgi.conf;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_pass php;

        # CORS support
        # Based on https://qa.lsproc.com/post/access-control-allow-origin-multiple-origin-domains
        if ($http_origin ~* (^https?://([^/]+\.)*(${NGINX_CORS_ENABLED_DOMAINS})$)) {
            set $cors "true";
        }

        # No support for nested Ifs, so we need to make things fancier
        if ($request_method = 'OPTIONS') {
            set $cors "${cors}options";
        }
        if ($request_method = 'GET') {
            set $cors "${cors}get";
        }
        if ($request_method = 'POST') {
            set $cors "${cors}post";
        }
        if ($request_method = 'PATCH') {
            set $cors "${cors}patch";
        }
        if ($request_method = 'PUT') {
            set $cors "${cors}put";
        }
        if ($request_method = 'DELETE') {
            set $cors "${cors}delete";
        }

        # Catch all for request methods we're not dealing with
        if ($cors = "true") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
        }

        if ($cors = "trueoptions") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';

            # Support cookies
            add_header 'Access-Control-Allow-Credentials' 'true';

            # Custom headers and headers various browsers *should* be OK with but aren't
            add_header 'Access-Control-Allow-Headers' 'Authorization,X-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';

            # Tell client that this pre-flight info is valid for 20 days
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($cors = "trueget") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,X-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($cors = "truepost") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,X-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($cors = "truepatch") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,X-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($cors = "trueput") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,X-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($cors = "truedelete") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,X-CSRF-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
    }

    location ~ ^/sites/.*/files/styles/ {
        expires 30d;
        # Google cloud cdn needs a Cache-Control: public header.
        add_header Cache-Control "public";
        try_files $uri @rewrite;
    }

    # Handle private files through Drupal. Private file's path can come
    # with a language prefix.
    location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
        try_files $uri /index.php?$query_string;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|svg|woff2)$ {
        expires 30d;
        log_not_found off;
        # Google cloud cdn needs a Cache-Control: public header.
        add_header Cache-Control "public";
        try_files $uri @rewrite;
    }
}
